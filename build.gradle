/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'maven-publish'
    id 'signing'
}

repositories {
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:27.1-jre'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    // https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.6.0'

    // https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-gson
    implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.6.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

tasks.withType(Javadoc) {
    options.addStringOption("Xdoclint:none","-quiet")
    options.addStringOption("encoding","UTF-8")
    options.addStringOption("charSet","UTF-8")
}

//task javaDocTest(type: Javadoc) {
//    source = sourceSets.main.allJava
//    destinationDir = reporting.file("javadocs")
//    options.addStringOption("Xdoclint:none","-quiet")
//    options.addStringOption("encoding","UTF-8")
//    options.addStringOption("charSet","UTF-8")
//}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

version = "1.2.0-SNAPSHOT"

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = "$ossrhUsername"
                password = "$ossrhPassword"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.sdcalmes'
            artifactId 'sleeper-api'
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Sleeper API Wrapper'
                packaging = 'jar'
                description = 'This library gives you an easy-to-use wrapper for the Sleeper fantasy football API'
                url = 'https://github.com/sdcalmes/sleeper-api'

                scm {
                    connection = 'scm:git:git://github.com/sdcalmes/sleeper-api.git'
                    developerConnection = 'scm:git:ssh://github.com:sdcalmes/sleeper-api.git'
                    url = 'https://github.com/sdcalmes/sleeper-api'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/sdcalmes/sleeper-api/blob/master/LICENSE.txt'
                    }
                }

                developers {
                    developer {
                        id = 'sdcalmes'
                        name = 'Sam Calmes'
                        email = 'sdcalmes@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

